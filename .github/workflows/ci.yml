name: build-and-pack

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch: {}

jobs:
  build-linux:
    name: build linux (x86_64, aarch64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Zig 0.15.1
        uses: mlugg/setup-zig@v2
        with:
          version: 0.15.1

      - name: Build linux targets
        shell: bash
        run: |
          set -euxo pipefail
          rm -rf dist
          mkdir -p dist
          # Build glibc and musl Linux targets
          for target in x86_64-linux-gnu aarch64-linux-gnu x86_64-linux-musl aarch64-linux-musl; do
            rm -rf zig-out
            bunx --yes zig build -Doptimize=ReleaseFast -Dtarget=$target
            case "$target" in
              aarch64-*) arch=aarch64 ;;
              *) arch=x86_64 ;;
            esac
            libc=""
            if [[ "$target" == *-musl ]]; then libc="-musl"; fi
            outdir="dist/linux-$arch$libc"
            mkdir -p "$outdir"
            cp zig-out/bin/terminalfont-detect* "$outdir/"
          done


      - name: Upload linux x86_64
        uses: actions/upload-artifact@v4
        with:
          name: terminalfont-detect-linux-x86_64
          path: dist/linux-x86_64/*

      - name: Upload linux aarch64
        uses: actions/upload-artifact@v4
        with:
          name: terminalfont-detect-linux-aarch64
          path: dist/linux-aarch64/*

      - name: Upload linux x86_64 musl
        uses: actions/upload-artifact@v4
        with:
          name: terminalfont-detect-linux-x86_64-musl
          path: dist/linux-x86_64-musl/*

      - name: Upload linux aarch64 musl
        uses: actions/upload-artifact@v4
        with:
          name: terminalfont-detect-linux-aarch64-musl
          path: dist/linux-aarch64-musl/*

      # Windows artifacts are uploaded by the windows job

  build-macos:
    name: build macos
    runs-on: macos-latest
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Zig 0.15.1
        uses: mlugg/setup-zig@v2
        with:
          version: 0.15.1

      - name: Build (Release)
        shell: bash
        run: |
          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer || true
          SDKROOT="$(xcrun --sdk macosx --show-sdk-path)"
          bunx --yes zig build -Doptimize=ReleaseFast -Dapple_sdk="$SDKROOT"

      - name: Derive artifact name
        id: names
        shell: bash
        run: |
          echo "os_name=macos" >> $GITHUB_OUTPUT
          echo "arch_name=$(uname -m)" >> $GITHUB_OUTPUT

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: terminalfont-detect-${{ steps.names.outputs.os_name }}-${{ steps.names.outputs.arch_name }}
          path: zig-out/bin/terminalfont-detect*

  build-windows:
    name: build windows
    runs-on: windows-latest
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Zig 0.15.1
        uses: mlugg/setup-zig@v2
        with:
          version: 0.15.1

      - name: Build (Release)
        shell: bash
        run: |
          bunx --yes zig build -Doptimize=ReleaseFast

      - name: Derive artifact name
        id: names
        shell: bash
        run: |
          echo "os_name=windows" >> $GITHUB_OUTPUT
          echo "arch_name=$(uname -m)" >> $GITHUB_OUTPUT

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: terminalfont-detect-${{ steps.names.outputs.os_name }}-${{ steps.names.outputs.arch_name }}
          path: zig-out/bin/terminalfont-detect*


  pack:
    name: pack npm
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    environment: main
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Assemble npm package layout
        shell: bash
        run: |
          set -euxo pipefail
          # Create platform-specific packages
          mkdir -p npm/pkgs
          for a in artifacts/*; do
            base=$(basename "$a")
            os=; cpu=; libc=""; suf=""
            if [[ "$base" == *macos* ]]; then os=darwin; fi
            if [[ "$base" == *linux* ]]; then os=linux; fi
            if [[ "$base" == *windows* || "$base" == *win* ]]; then os=win32; suf=".exe"; fi
            if [[ "$base" == *arm64* || "$base" == *aarch64* ]]; then cpu=arm64; else cpu=x64; fi
            if [[ "$os" == linux ]]; then
              if [[ "$base" == *musl* ]]; then libc=musl; else libc=gnu; fi
              pkgdir="npm/pkgs/@vishyfishy2/terminalfont-detect-$os-$cpu-$libc"
            else
              pkgdir="npm/pkgs/@vishyfishy2/terminalfont-detect-$os-$cpu"
            fi
            mkdir -p "$pkgdir/bin"

            # Derive libc suffix/desc for metadata
            libcsuffix=""
            libcdesc=""
            if [[ "$os" == linux ]]; then
              if [[ "$libc" == musl ]]; then libcsuffix="-musl"; libcdesc="-musl"; else libcsuffix="-gnu"; libcdesc="-gnu"; fi
            fi

            # Write package.json using Node to avoid heredocs confusing YAML linters
            pkg_name="@vishyfishy2/terminalfont-detect-$os-$cpu$libcsuffix"
            desc="terminalfont-detect prebuilt binary ($os-$cpu$libcdesc)"
            node -e 'const fs=require("fs"); const [out,name,os,cpu,desc]=process.argv.slice(1); const pkg={name, version:"0.1.0", description:desc, license:"MIT", main:"index.js", os:[os], cpu:[cpu], files:["bin/","index.js"]}; fs.writeFileSync(out, JSON.stringify(pkg, null, 2)+"\n");' \
              "$pkgdir/package.json" "$pkg_name" "$os" "$cpu" "$desc"

            # Write tiny JS entry to expose binary path for meta package to require
            printf '%s\n' 'const { join } = require("path");' \
              "module.exports = { binaryPath: join(__dirname, \"bin\", \"terminalfont-detect$suf\") };" \
              > "$pkgdir/index.js"

            # Place binary (single explicit file to avoid wildcard issues)
            cp "$a/terminalfont-detect$suf" "$pkgdir/bin/terminalfont-detect$suf"
          done

          # Also prepare the meta package (already in npm/package)
          echo done

      - name: List package files
        run: |
          find npm/package -maxdepth 3 -type f -print

      - name: Pack (npm pack)
        working-directory: npm/package
        run: npm pack

      - name: Upload npm tarball
        uses: actions/upload-artifact@v4
        with:
          name: npm-tarball
          path: npm/package/*.tgz

      - name: Pack platform packages
        shell: bash
        run: |
          set -euxo pipefail
          for d in npm/pkgs/@vishyfishy2/*; do
            (cd "$d" && npm pack)
          done

      - name: Upload platform tarballs
        uses: actions/upload-artifact@v4
        with:
          name: npm-tarballs-platform
          path: npm/pkgs/@vishyfishy2/**/*.tgz

      - name: Configure npm registry auth
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          scope: '@vishyfishy2'

      - name: Publish to npm (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        shell: bash
        run: |
          set -euxo pipefail
          # Publish platform packages first
          for d in npm/pkgs/@vishyfishy2/*; do
            (cd "$d" && npm publish --access public)
          done
          # Publish meta package
          (cd npm/package && npm publish --access public)
