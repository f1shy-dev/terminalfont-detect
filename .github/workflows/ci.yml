name: build-and-pack

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch: {}

jobs:
  build:
    name: build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Zig 0.15.1
        uses: mlugg/setup-zig@v2
        with:
          version: 0.15.1

      - name: Build (Release)
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            sudo xcode-select -s /Applications/Xcode.app/Contents/Developer || true
            SDKROOT="$(xcrun --sdk macosx --show-sdk-path)"
            bunx --yes zig build -Doptimize=ReleaseFast -Dapple_sdk="$SDKROOT"
          else
            bunx --yes zig build -Doptimize=ReleaseFast
          fi

      - name: Derive artifact name
        id: names
        shell: bash
        run: |
          OS=${{ runner.os }}
          case "$OS" in
            macOS) os_name=macos ;;
            Linux) os_name=linux ;;
            Windows) os_name=windows ;;
          esac
          arch_name=$(uname -m)
          echo "os_name=$os_name" >> $GITHUB_OUTPUT
          echo "arch_name=$arch_name" >> $GITHUB_OUTPUT

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: terminalfont-detect-${{ steps.names.outputs.os_name }}-${{ steps.names.outputs.arch_name }}
          path: |
            zig-out/bin/terminalfont-detect*

  pack:
    name: pack npm
    runs-on: ubuntu-latest
    needs: build
    environment: main
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Assemble npm package layout
        shell: bash
        run: |
          set -euxo pipefail
          # Create platform-specific packages
          mkdir -p npm/pkgs
          for a in artifacts/*; do
            base=$(basename "$a")
            os=; cpu=; suf=""
            if [[ "$base" == *macos* ]]; then os=darwin; fi
            if [[ "$base" == *linux* ]]; then os=linux; fi
            if [[ "$base" == *windows* || "$base" == *win* ]]; then os=win32; suf=".exe"; fi
            if [[ "$base" == *arm64* || "$base" == *aarch64* ]]; then cpu=arm64; else cpu=x64; fi
            pkgdir="npm/pkgs/@vishyfishy2/terminalfont-detect-$os-$cpu"
            mkdir -p "$pkgdir/bin"
            # package.json
            cat > "$pkgdir/package.json" <<JSON
{
  "name": "@vishyfishy2/terminalfont-detect-$os-$cpu",
  "version": "0.1.0",
  "description": "terminalfont-detect prebuilt binary ($os-$cpu)",
  "license": "MIT",
  "os": ["$os"],
  "cpu": ["$cpu"],
  "files": ["bin/"]
}
JSON
            # place binary
            cp "$a"/terminalfont-detect* "$pkgdir/bin/terminalfont-detect$suf"
          done

          # Also prepare the meta package (already in npm/package)
          echo done

      - name: List package files
        run: |
          find npm/package -maxdepth 3 -type f -print

      - name: Pack (npm pack)
        working-directory: npm/package
        run: npm pack

      - name: Upload npm tarball
        uses: actions/upload-artifact@v4
        with:
          name: npm-tarball
          path: npm/package/*.tgz

      - name: Pack platform packages
        shell: bash
        run: |
          set -euxo pipefail
          for d in npm/pkgs/@vishyfishy2/*; do
            (cd "$d" && npm pack)
          done

      - name: Upload platform tarballs
        uses: actions/upload-artifact@v4
        with:
          name: npm-tarballs-platform
          path: npm/pkgs/@vishyfishy2/**/*.tgz

      - name: Publish to npm (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        shell: bash
        run: |
          set -euxo pipefail
          # Publish platform packages first
          for d in npm/pkgs/@vishyfishy2/*; do
            (cd "$d" && npm publish --access public)
          done
          # Publish meta package
          (cd npm/package && npm publish --access public)


